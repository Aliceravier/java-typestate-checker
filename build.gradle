plugins {
    id 'java'
    id 'maven-publish'
    id 'antlr'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    // for putting Error Prone javac in bootclasspath for running tests
    errorproneJavac
}

ext {
    versions = [
        antlr4: "4.8",
        checkerFramework: "3.1.1",
        errorproneJavacVersion: "9+181-r4173-1",
        junit: "4.13",
    ]
}

sourceCompatibility = 1.8
def checkerframework_local = false

dependencies {
    antlr "org.antlr:antlr4:${versions.antlr4}"
    // ?? implementation "org.antlr:antlr4-runtime:${versions.antlr4}"

    if (checkerframework_local) {
        implementation files("checker-framework-${versions.checkerFramework}/checker/dist/checker-qual.jar")
        implementation files("checker-framework-${versions.checkerFramework}/checker/dist/checker.jar")
        implementation files("checker-framework-${versions.checkerFramework}/checker/dist/jdk8.jar")
    }
    else {
        implementation "org.checkerframework:checker:${versions.checkerFramework}"
    }

    compileOnly "com.google.errorprone:javac:${versions.errorproneJavacVersion}"

    // Testing
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.checkerframework:framework-test:${versions.checkerFramework}"

    errorproneJavac "com.google.errorprone:javac:${versions.errorproneJavacVersion}"
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

// Add `mavenLocal()` in `repositories`, then run `./gradlew publishToMavenLocal`
// to publish your checker to your local Maven repository.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.checkerframework'
            artifactId = 'mungo-checker'
            version = '0.1-SNAPSHOT'

            from components.java
        }
    }
}

test {
    testLogging.showStandardStreams = true

    inputs.files("tests/mungo")
    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
}
